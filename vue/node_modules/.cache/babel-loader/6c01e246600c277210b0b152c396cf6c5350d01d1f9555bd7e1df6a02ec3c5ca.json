{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from '@/utils/request';\nexport default {\n  name: 'Comment',\n  props: {\n    bookId: {\n      type: [Number, String],\n      required: true\n    }\n  },\n  data() {\n    return {\n      comments: [],\n      newComment: '',\n      replyContent: '',\n      replyingTo: null,\n      submitting: false,\n      loading: false,\n      defaultAvatar: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      userInfo: null\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return this.userInfo && this.userInfo.id;\n    }\n  },\n  created() {\n    this.userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n    this.loadComments();\n  },\n  methods: {\n    loadComments() {\n      request.get(\"/comment/select\", {\n        params: {\n          BookId: this.bookId\n        }\n      }).then(res => {\n        if (res.code === '0') {\n          this.comments = res.data;\n          console.log(res.data);\n          //遍历所有父评论，一个父评论一次循环，内循环遍历整个列表，遇到所属子评论将其包含入replies中\n          //并将其从comments中除名\n          for (let i = 0; i < size; i++) {\n            if (this.comments[i].parentId != null) continue;\n            let temp = 0;\n            for (let j = 1; j < size; j++) {\n              if (this.comments[i].id == this.comments[j].parentId) {\n                if (!this.comments[i].replies) {\n                  this.comments[i].replies = [];\n                }\n                this.comments[i].replies[temp++] = this.comments[j];\n                this.comments.splice(j, 1);\n                j--;\n              }\n            } //j\n          } //i\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    async submitComment() {\n      if (!this.newComment.trim()) return;\n      try {\n        this.submitting = true;\n\n        // 模拟API调用，实际项目中应该调用后端API\n        const newCommentObj = {\n          id: Date.now(),\n          bookId: this.bookId,\n          userId: this.userInfo.id,\n          userName: this.userInfo.name || this.userInfo.username,\n          userAvatar: this.userInfo.avatar,\n          content: this.newComment.trim(),\n          createTime: new Date(),\n          parentId: null,\n          replies: []\n        };\n        this.comments.unshift(newCommentObj);\n        this.newComment = '';\n        this.$message.success('评论发表成功');\n      } catch (error) {\n        console.error('发表评论失败:', error);\n        this.$message.error('发表评论失败');\n      } finally {\n        this.submitting = false;\n      }\n    },\n    replyToComment(comment) {\n      this.replyingTo = comment.id;\n      this.replyContent = '';\n    },\n    cancelReply() {\n      this.replyingTo = null;\n      this.replyContent = '';\n    },\n    async submitReply(parentComment) {\n      if (!this.replyContent.trim()) return;\n      try {\n        this.submitting = true;\n\n        // 模拟API调用，实际项目中应该调用后端API\n        const newReply = {\n          id: Date.now(),\n          bookId: this.bookId,\n          userId: this.userInfo.id,\n          userName: this.userInfo.name || this.userInfo.username,\n          userAvatar: this.userInfo.avatar,\n          content: this.replyContent.trim(),\n          createTime: new Date(),\n          parentId: parentComment.id,\n          parentUserName: parentComment.userName || '匿名用户'\n        };\n        if (!parentComment.replies) {\n          this.$set(parentComment, 'replies', []);\n        }\n        parentComment.replies.push(newReply);\n        this.replyContent = '';\n        this.replyingTo = null;\n        this.$message.success('回复成功');\n      } catch (error) {\n        console.error('回复失败:', error);\n        this.$message.error('回复失败');\n      } finally {\n        this.submitting = false;\n      }\n    },\n    goToLogin() {\n      this.$router.push('/login');\n    },\n    formatTime(time) {\n      if (!time) return '';\n      const date = new Date(time);\n      const now = new Date();\n      const diff = now - date;\n      if (diff < 60000) {\n        return '刚刚';\n      } else if (diff < 3600000) {\n        return Math.floor(diff / 60000) + '分钟前';\n      } else if (diff < 86400000) {\n        return Math.floor(diff / 3600000) + '小时前';\n      } else if (diff < 2592000000) {\n        return Math.floor(diff / 86400000) + '天前';\n      } else {\n        return date.toLocaleDateString();\n      }\n    },\n    // 模拟评论数据，实际项目中应该从后端获取\n    getMockComments() {\n      return [{\n        id: 1,\n        bookId: this.bookId,\n        userId: 1,\n        userName: '番茄',\n        userAvatar: 'http://localhost:9090/files/1741934276948-1.png',\n        content: '这本书非常精彩，内容丰富，值得一读！作者的写作风格很独特，故事情节引人入胜。',\n        createTime: new Date(Date.now() - 86400000),\n        // 1天前\n        parentId: null,\n        replies: [{\n          id: 2,\n          bookId: this.bookId,\n          userId: 2,\n          userName: '番茄你个西红柿',\n          userAvatar: 'http://localhost:9090/files/1751524617169-3.jpg',\n          content: '我也觉得很不错，特别是其中的推理部分，让人意想不到。',\n          createTime: new Date(Date.now() - 43200000),\n          // 12小时前\n          parentId: 1,\n          parentUserName: '番茄'\n        }]\n      }, {\n        id: 3,\n        bookId: this.bookId,\n        userId: 2,\n        userName: '番茄你个西红柿',\n        userAvatar: 'http://localhost:9090/files/1751524617169-3.jpg',\n        content: '推荐大家购买，性价比很高。印刷质量也很好，读起来很舒服。',\n        createTime: new Date(Date.now() - 172800000),\n        // 2天前\n        parentId: null,\n        replies: []\n      }];\n    }\n  }\n};","map":{"version":3,"names":["request","name","props","bookId","type","Number","String","required","data","comments","newComment","replyContent","replyingTo","submitting","loading","defaultAvatar","userInfo","computed","isLoggedIn","id","created","JSON","parse","localStorage","getItem","loadComments","methods","get","params","BookId","then","res","code","console","log","i","size","parentId","temp","j","replies","splice","$message","error","msg","submitComment","trim","newCommentObj","Date","now","userId","userName","username","userAvatar","avatar","content","createTime","unshift","success","replyToComment","comment","cancelReply","submitReply","parentComment","newReply","parentUserName","$set","push","goToLogin","$router","formatTime","time","date","diff","Math","floor","toLocaleDateString","getMockComments"],"sources":["src/components/Comment.vue"],"sourcesContent":["<template>\r\n  <div class=\"comment-container\">\r\n    <div class=\"comment-header\">\r\n      <h3>评论区</h3>\r\n      <span class=\"comment-count\">共 {{ comments.length }} 条评论</span>\r\n    </div>\r\n\r\n    <!-- 评论输入区域 -->\r\n    <div class=\"comment-input-area\" v-if=\"isLoggedIn\">\r\n      <el-input\r\n        v-model=\"newComment\"\r\n        type=\"textarea\"\r\n        :rows=\"3\"\r\n        placeholder=\"写下你的评论...\"\r\n        class=\"comment-input\"\r\n      />\r\n      <div class=\"comment-input-actions\">\r\n        <el-button\r\n          type=\"primary\"\r\n          @click=\"submitComment\"\r\n          :loading=\"submitting\"\r\n          :disabled=\"!newComment.trim()\"\r\n        >\r\n          发表评论\r\n        </el-button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 未登录提示 -->\r\n    <div class=\"login-prompt\" v-else>\r\n      <el-alert\r\n        title=\"请先登录后再发表评论\"\r\n        type=\"info\"\r\n        show-icon\r\n        :closable=\"false\"\r\n      >\r\n        <el-button type=\"text\" @click=\"goToLogin\">去登录</el-button>\r\n      </el-alert>\r\n    </div>\r\n\r\n    <!-- 评论列表 -->\r\n    <div class=\"comment-list\">\r\n      <div v-if=\"comments.length === 0\" class=\"no-comments\">\r\n        <p>暂无评论，快来发表第一条评论吧！</p>\r\n      </div>\r\n\r\n      <div v-else class=\"comment-items\">\r\n        <div\r\n          v-for=\"comment in comments\"\r\n          :key=\"comment.id\"\r\n          class=\"comment-item\"\r\n        >\r\n          <div class=\"comment-avatar\">\r\n            <el-avatar\r\n              :src=\"comment.userAvatar || defaultAvatar\"\r\n              :size=\"40\"\r\n            >\r\n              {{ comment.username ? comment.username.charAt(0).toUpperCase() : 'U' }}\r\n            </el-avatar>\r\n          </div>\r\n\r\n          <div class=\"comment-content\">\r\n            <div class=\"comment-meta\">\r\n              <span class=\"comment-author\">{{ comment.username || '匿名用户' }}</span>\r\n              <span class=\"comment-time\">{{ formatTime(comment.createTime) }}</span>\r\n            </div>\r\n\r\n            <div class=\"comment-text\">\r\n              {{ comment.content }}\r\n            </div>\r\n\r\n            <div class=\"comment-actions\">\r\n              <el-button\r\n                type=\"text\"\r\n                size=\"small\"\r\n                @click=\"replyToComment(comment)\"\r\n              >\r\n                回复\r\n              </el-button>\r\n            </div>\r\n\r\n            <!-- 回复输入框 -->\r\n            <div v-if=\"replyingTo === comment.id\" class=\"reply-input-area\">\r\n              <el-input\r\n                v-model=\"replyContent\"\r\n                type=\"textarea\"\r\n                :rows=\"2\"\r\n                :placeholder=\"`回复 ${comment.userName || '匿名用户'}：`\"\r\n                class=\"reply-input\"\r\n              />\r\n              <div class=\"reply-actions\">\r\n                <el-button\r\n                  type=\"primary\"\r\n                  size=\"small\"\r\n                  @click=\"submitReply(comment)\"\r\n                  :loading=\"submitting\"\r\n                  :disabled=\"!replyContent.trim()\"\r\n                >\r\n                  回复\r\n                </el-button>\r\n                <el-button\r\n                  type=\"text\"\r\n                  size=\"small\"\r\n                  @click=\"cancelReply\"\r\n                >\r\n                  取消\r\n                </el-button>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- 子评论回复列表 -->\r\n            <div v-if=\"comment.replies && comment.replies.length > 0\" class=\"replies-list\">\r\n              <div\r\n                v-for=\"reply in comment.replies\"\r\n                :key=\"reply.id\"\r\n                class=\"reply-item\"\r\n              >\r\n                <div class=\"reply-avatar\">\r\n                  <el-avatar\r\n                    :src=\"reply.userAvatar || defaultAvatar\"\r\n                    :size=\"30\"\r\n                  >\r\n                    {{ reply.userName ? reply.userName.charAt(0).toUpperCase() : 'U' }}\r\n                  </el-avatar>\r\n                </div>\r\n\r\n                <div class=\"reply-content\">\r\n                  <div class=\"reply-meta\">\r\n                    <span class=\"reply-author\">{{ reply.userName || '匿名用户' }}</span>\r\n                    <span class=\"reply-time\">{{ formatTime(reply.createTime) }}</span>\r\n                  </div>\r\n\r\n                  <div class=\"reply-text\">\r\n                    <span class=\"reply-to\">回复 {{ reply.parentUserName || '匿名用户' }}：</span>\r\n                    {{ reply.content }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from '@/utils/request'\r\n\r\nexport default {\r\n  name: 'Comment',\r\n  props: {\r\n    bookId: {\r\n      type: [Number, String],\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      comments: [],\r\n      newComment: '',\r\n      replyContent: '',\r\n      replyingTo: null,\r\n      submitting: false,\r\n      loading: false,\r\n      defaultAvatar: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\r\n      userInfo: null\r\n    }\r\n  },\r\n  computed: {\r\n    isLoggedIn() {\r\n      return this.userInfo && this.userInfo.id\r\n    }\r\n  },\r\n  created() {\r\n    this.userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}')\r\n    this.loadComments()\r\n  },\r\n  methods: {\r\n    loadComments() {\r\n      request.get(\"/comment/select\", {\r\n        params:{\r\n          BookId: this.bookId\r\n        }\r\n      }).then(res =>{\r\n        if(res.code === '0'){\r\n          this.comments = res.data;\r\n          console.log(res.data);\r\n          //遍历所有父评论，一个父评论一次循环，内循环遍历整个列表，遇到所属子评论将其包含入replies中\r\n          //并将其从comments中除名\r\n          for (let i = 0; i < size; i++) {\r\n            if (this.comments[i].parentId != null)\r\n              continue;\r\n            let temp = 0;\r\n            for (let j = 1; j < size; j++){\r\n              if (this.comments[i].id == this.comments[j].parentId){\r\n                if (!this.comments[i].replies) {\r\n                  this.comments[i].replies = [];\r\n                }\r\n                this.comments[i].replies[temp++] = this.comments[j];\r\n                this.comments.splice(j, 1);\r\n                j--;\r\n              }\r\n            }//j\r\n          }//i\r\n        }\r\n        else{\r\n          this.$message.error(res.msg)\r\n        }\r\n      })\r\n    },\r\n\r\n    async submitComment() {\r\n      if (!this.newComment.trim()) return\r\n\r\n      try {\r\n        this.submitting = true\r\n\r\n        // 模拟API调用，实际项目中应该调用后端API\r\n        const newCommentObj = {\r\n          id: Date.now(),\r\n          bookId: this.bookId,\r\n          userId: this.userInfo.id,\r\n          userName: this.userInfo.name || this.userInfo.username,\r\n          userAvatar: this.userInfo.avatar,\r\n          content: this.newComment.trim(),\r\n          createTime: new Date(),\r\n          parentId: null,\r\n          replies: []\r\n        }\r\n\r\n        this.comments.unshift(newCommentObj)\r\n        this.newComment = ''\r\n\r\n        this.$message.success('评论发表成功')\r\n      } catch (error) {\r\n        console.error('发表评论失败:', error)\r\n        this.$message.error('发表评论失败')\r\n      } finally {\r\n        this.submitting = false\r\n      }\r\n    },\r\n\r\n    replyToComment(comment) {\r\n      this.replyingTo = comment.id\r\n      this.replyContent = ''\r\n    },\r\n\r\n    cancelReply() {\r\n      this.replyingTo = null\r\n      this.replyContent = ''\r\n    },\r\n\r\n    async submitReply(parentComment) {\r\n      if (!this.replyContent.trim()) return\r\n\r\n      try {\r\n        this.submitting = true\r\n\r\n        // 模拟API调用，实际项目中应该调用后端API\r\n        const newReply = {\r\n          id: Date.now(),\r\n          bookId: this.bookId,\r\n          userId: this.userInfo.id,\r\n          userName: this.userInfo.name || this.userInfo.username,\r\n          userAvatar: this.userInfo.avatar,\r\n          content: this.replyContent.trim(),\r\n          createTime: new Date(),\r\n          parentId: parentComment.id,\r\n          parentUserName: parentComment.userName || '匿名用户'\r\n        }\r\n\r\n        if (!parentComment.replies) {\r\n          this.$set(parentComment, 'replies', [])\r\n        }\r\n        parentComment.replies.push(newReply)\r\n\r\n        this.replyContent = ''\r\n        this.replyingTo = null\r\n\r\n        this.$message.success('回复成功')\r\n      } catch (error) {\r\n        console.error('回复失败:', error)\r\n        this.$message.error('回复失败')\r\n      } finally {\r\n        this.submitting = false\r\n      }\r\n    },\r\n\r\n    goToLogin() {\r\n      this.$router.push('/login')\r\n    },\r\n\r\n    formatTime(time) {\r\n      if (!time) return ''\r\n\r\n      const date = new Date(time)\r\n      const now = new Date()\r\n      const diff = now - date\r\n\r\n      if (diff < 60000) {\r\n        return '刚刚'\r\n      } else if (diff < 3600000) {\r\n        return Math.floor(diff / 60000) + '分钟前'\r\n      } else if (diff < 86400000) {\r\n        return Math.floor(diff / 3600000) + '小时前'\r\n      } else if (diff < 2592000000) {\r\n        return Math.floor(diff / 86400000) + '天前'\r\n      } else {\r\n        return date.toLocaleDateString()\r\n      }\r\n    },\r\n\r\n    // 模拟评论数据，实际项目中应该从后端获取\r\n    getMockComments() {\r\n      return [\r\n        {\r\n          id: 1,\r\n          bookId: this.bookId,\r\n          userId: 1,\r\n          userName: '番茄',\r\n          userAvatar: 'http://localhost:9090/files/1741934276948-1.png',\r\n          content: '这本书非常精彩，内容丰富，值得一读！作者的写作风格很独特，故事情节引人入胜。',\r\n          createTime: new Date(Date.now() - 86400000), // 1天前\r\n          parentId: null,\r\n          replies: [\r\n            {\r\n              id: 2,\r\n              bookId: this.bookId,\r\n              userId: 2,\r\n              userName: '番茄你个西红柿',\r\n              userAvatar: 'http://localhost:9090/files/1751524617169-3.jpg',\r\n              content: '我也觉得很不错，特别是其中的推理部分，让人意想不到。',\r\n              createTime: new Date(Date.now() - 43200000), // 12小时前\r\n              parentId: 1,\r\n              parentUserName: '番茄'\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          id: 3,\r\n          bookId: this.bookId,\r\n          userId: 2,\r\n          userName: '番茄你个西红柿',\r\n          userAvatar: 'http://localhost:9090/files/1751524617169-3.jpg',\r\n          content: '推荐大家购买，性价比很高。印刷质量也很好，读起来很舒服。',\r\n          createTime: new Date(Date.now() - 172800000), // 2天前\r\n          parentId: null,\r\n          replies: []\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.comment-container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.comment-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 15px;\r\n  border-bottom: 1px solid #ebeef5;\r\n}\r\n\r\n.comment-header h3 {\r\n  margin: 0;\r\n  color: #303133;\r\n  font-size: 18px;\r\n}\r\n\r\n.comment-count {\r\n  color: #909399;\r\n  font-size: 14px;\r\n}\r\n\r\n.comment-input-area {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.comment-input {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.comment-input-actions {\r\n  text-align: right;\r\n}\r\n\r\n.login-prompt {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.login-prompt .el-button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.comment-list {\r\n  margin-top: 20px;\r\n}\r\n\r\n.no-comments {\r\n  text-align: center;\r\n  padding: 40px;\r\n  color: #909399;\r\n  background: #fafafa;\r\n  border-radius: 4px;\r\n}\r\n\r\n.comment-items {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.comment-item {\r\n  display: flex;\r\n  gap: 15px;\r\n  padding: 15px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #ebeef5;\r\n}\r\n\r\n.comment-avatar {\r\n  flex-shrink: 0;\r\n}\r\n\r\n.comment-content {\r\n  flex: 1;\r\n}\r\n\r\n.comment-meta {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.comment-author {\r\n  font-weight: 600;\r\n  color: #303133;\r\n}\r\n\r\n.comment-time {\r\n  color: #909399;\r\n  font-size: 12px;\r\n}\r\n\r\n.comment-text {\r\n  color: #606266;\r\n  line-height: 1.6;\r\n  margin-bottom: 10px;\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.comment-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.reply-input-area {\r\n  margin-top: 15px;\r\n  padding: 15px;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  border: 1px solid #dcdfe6;\r\n}\r\n\r\n.reply-input {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.reply-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.replies-list {\r\n  margin-top: 15px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.reply-item {\r\n  display: flex;\r\n  gap: 10px;\r\n  padding: 10px;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  border: 1px solid #ebeef5;\r\n}\r\n\r\n.reply-avatar {\r\n  flex-shrink: 0;\r\n}\r\n\r\n.reply-content {\r\n  flex: 1;\r\n}\r\n\r\n.reply-meta {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.reply-author {\r\n  font-weight: 500;\r\n  color: #606266;\r\n  font-size: 14px;\r\n}\r\n\r\n.reply-time {\r\n  color: #c0c4cc;\r\n  font-size: 11px;\r\n}\r\n\r\n.reply-text {\r\n  color: #606266;\r\n  line-height: 1.5;\r\n  font-size: 14px;\r\n}\r\n\r\n.reply-to {\r\n  color: #409eff;\r\n  font-weight: 500;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .comment-container {\r\n    padding: 15px;\r\n  }\r\n\r\n  .comment-item {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .comment-avatar {\r\n    align-self: flex-start;\r\n  }\r\n\r\n  .reply-item {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .reply-avatar {\r\n    align-self: flex-start;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}